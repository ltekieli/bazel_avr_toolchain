load("@bazel_tools//tools/build_defs/cc:action_names.bzl", "ACTION_NAMES")
load(
    "@bazel_tools//tools/cpp:cc_toolchain_config_lib.bzl",
    "action_config",
    "feature",
    "flag_group",
    "flag_set",
    "tool",
    "tool_path",
)

def _impl(ctx):
    c_compile_action = action_config(
        action_name = ACTION_NAMES.c_compile,
        tools = [
            tool(
                tool = ctx.executable.binary_gcc,
            ),
        ],
    )

    cpp_compile_action = action_config(
        action_name = ACTION_NAMES.cpp_compile,
        tools = [
            tool(
                tool = ctx.executable.binary_gcc,
            ),
        ],
    )

    cpp_link_executable_action = action_config(
        action_name = ACTION_NAMES.cpp_link_executable,
        tools = [
            tool(
                tool = ctx.executable.binary_gcc,
            ),
        ],
    )

    cpp_link_static_library_action = action_config(
        action_name = ACTION_NAMES.cpp_link_static_library,
        tools = [
            tool(
                tool = ctx.executable.binary_ar,
            ),
        ],
    )

    strip_action = action_config(
        action_name = ACTION_NAMES.strip,
        tools = [
            tool(
                tool = ctx.executable.binary_strip,
            ),
        ],
    )

    objcopy_action = action_config(
        action_name = ACTION_NAMES.objcopy_embed_data,
        tools = [
            tool(
                tool = ctx.executable.binary_objcopy,
            ),
        ],
    )

    default_compiler_flags = feature(
        name = "default_compiler_flags",
        enabled = True,
        flag_sets = [
            flag_set(
                actions = [
                    ACTION_NAMES.c_compile,
                    ACTION_NAMES.cpp_compile,
                ],
                flag_groups = [
                    #
                    # Compile only.
                    #
                    flag_group(
                        flags = [
                            "-c",
                        ],
                    ),
                    #
                    # Optimize for size by default
                    #
                    flag_group(
                        flags = [
                            "-Os",
                        ],
                    ),
                    #
                    # Do not canonicalize paths. This is needed because everything is a symlink
                    # in Bazel. Canonicalizing will resolve those and confuse Bazel, which will think
                    # access outside of sandobox is requested.
                    #
                    flag_group(
                        flags = [
                            "-no-canonical-prefixes",
                            "-fno-canonical-system-headers",
                        ],
                    ),
                    #
                    # Override autogenerated macros with fixed values.
                    #
                    flag_group(
                        flags = [
                            "-Wno-builtin-macro-redefined",
                            "-D__DATE__=\"redacted\"",
                            "-D__TIMESTAMP__=\"redacted\"",
                            "-D__TIME__=\"redacted\"",
                        ],
                    ),
                    #
                    # Generates dependencies to headers for every object file.
                    # Bazel uses this to find usage of headers outside of the sandbox.
                    #
                    flag_group(
                        flags = [
                            "-MD",
                            "-MF",
                            "%{dependency_file}",
                        ],
                    ),
                    #
                    # Add defines.
                    #
                    flag_group(
                        iterate_over = "preprocessor_defines",
                        flags = [
                            "-D%{preprocessor_defines}",
                        ],
                    ),
                    #
                    # Add include paths.
                    #
                    flag_group(
                        iterate_over = "include_paths",
                        flags = [
                            "-I%{include_paths}",
                        ],
                    ),
                    #
                    # Add quote include paths.
                    #
                    flag_group(
                        iterate_over = "quote_include_paths",
                        flags = [
                            "-I%{quote_include_paths}",
                        ],
                    ),
                    #
                    # Use input file and declare output file.
                    #
                    flag_group(
                        flags = [
                            "%{source_file}",
                            "-o",
                            "%{output_file}",
                        ],
                    ),
                ],
            ),
        ],
    )

    atmega32 = feature(
        name = "atmega32",
        enabled = False,
        provides = ["avr_mcu_type"],
        flag_sets = [
            flag_set(
                actions = [
                    ACTION_NAMES.c_compile,
                    ACTION_NAMES.cpp_compile,
                    ACTION_NAMES.cpp_link_executable,
                ],
                flag_groups = [
                    #
                    # Setup MCU type.
                    #
                    flag_group(
                        flags = [
                            "-mmcu=atmega32",
                        ],
                    ),
                ],
            ),
        ],
    )

    atmega32u4 = feature(
        name = "atmega32u4",
        provides = ["avr_mcu_type"],
        enabled = False,
        flag_sets = [
            flag_set(
                actions = [
                    ACTION_NAMES.c_compile,
                    ACTION_NAMES.cpp_compile,
                    ACTION_NAMES.cpp_link_executable,
                ],
                flag_groups = [
                    #
                    # Setup MCU type.
                    #
                    flag_group(
                        flags = [
                            "-mmcu=atmega32u4",
                        ],
                    ),
                ],
            ),
        ],
    )

    default_archive_flags = feature(
        name = "default_archive_flags",
        enabled = True,
        flag_sets = [
            flag_set(
                actions = [
                    ACTION_NAMES.cpp_link_static_library,
                ],
                flag_groups = [
                    #
                    # Create archive and and add object files.
                    #
                    flag_group(
                        flags = [
                            "rcsD",
                        ],
                    ),
                    #
                    # Name of the archive
                    #
                    flag_group(
                        flags = [
                            "%{output_execpath}",
                        ],
                    ),
                    #
                    # Object files to archive.
                    #
                    flag_group(
                        iterate_over = "libraries_to_link",
                        flags = [
                            "%{libraries_to_link.name}",
                        ],
                    ),
                ],
            ),
        ],
    )

    default_linker_flags = feature(
        name = "default_linker_flags",
        enabled = True,
        flag_sets = [
            flag_set(
                actions = [
                    ACTION_NAMES.cpp_link_executable,
                ],
                flag_groups = [
                    #
                    # Declare output file.
                    #
                    flag_group(
                        flags = [
                            "-o",
                            "%{output_execpath}",
                        ],
                    ),
                    #
                    # Always link with math library
                    #
                    flag_group(
                        flags = [
                            "-lm",
                        ],
                    ),
                    #
                    # Link object files or archives.
                    #
                    flag_group(
                        iterate_over = "libraries_to_link",
                        flags = [
                            "%{libraries_to_link.name}",
                        ],
                    ),
                    #
                    # Bazel stores linker flags in a param file which needs to be given as input.
                    #
                    flag_group(
                        flags = [
                            "@%{linker_param_file}",
                        ],
                    ),
                ],
            ),
        ],
    )

    #
    # Disable legacy feature patching.
    # The tools invokation needs to be completely specified with features.
    #
    no_legacy_features = feature(name = "no_legacy_features")

    action_configs = [
        c_compile_action,
        cpp_compile_action,
        cpp_link_executable_action,
        cpp_link_static_library_action,
        strip_action,
        objcopy_action,
    ]

    features = [
        atmega32,
        atmega32u4,
        default_archive_flags,
        default_compiler_flags,
        default_linker_flags,
        no_legacy_features,
    ]

    return cc_common.create_cc_toolchain_config_info(
        ctx = ctx,
        action_configs = action_configs,
        features = features,
        toolchain_identifier = "unkown",
        target_system_name = "unknown",
        target_cpu = "unknown",
        target_libc = "unknown",
        compiler = "unknown",
    )

cc_toolchain_config = rule(
    implementation = _impl,
    attrs = {
        "binary_ar": attr.label(allow_single_file = True, executable = True, cfg = "exec", mandatory = True),
        "binary_gcc": attr.label(allow_single_file = True, executable = True, cfg = "exec", mandatory = True),
        "binary_strip": attr.label(allow_single_file = True, executable = True, cfg = "exec", mandatory = True),
        "binary_objcopy": attr.label(allow_single_file = True, executable = True, cfg = "exec", mandatory = True),
    },
    provides = [CcToolchainConfigInfo],
)
